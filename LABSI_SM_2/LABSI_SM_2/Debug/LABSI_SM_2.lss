
LABSI_SM_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070b  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064b  00000000  00000000  00000987  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b6  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000129  00000000  00000000  00001707  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ler_ad>:



void ler_ad()
{
	ADCSRA = ADCSRA | 0b01000000;
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC)) !=0);
  8a:	80 81       	ld	r24, Z
  8c:	86 fd       	sbrc	r24, 6
  8e:	fd cf       	rjmp	.-6      	; 0x8a <ler_ad+0xa>
	OCR0A = ADCH;
  90:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  94:	87 bd       	out	0x27, r24	; 39
  96:	08 95       	ret

00000098 <inic>:
}

void inic()
{
	DDRB = 0x02;		// Set PB1 as output
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00;
  9c:	17 b8       	out	0x07, r1	; 7
	DDRD = (1<<DDD6);
  9e:	90 e4       	ldi	r25, 0x40	; 64
  a0:	9a b9       	out	0x0a, r25	; 10
			
	PORTC = 0xFF;		// PULL-UPS
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	88 b9       	out	0x08, r24	; 8

	PORTD = 0xFF;
  a6:	8b b9       	out	0x0b, r24	; 11
	
	/* Timer 0 */
	TCCR0A = (2<<COM0A0)|(3<<WGM00);	//Toggle OC0A | Fast PWM non-inverted, modo 3
  a8:	83 e8       	ldi	r24, 0x83	; 131
  aa:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (2<<CS00);				//PRESCALER=1024 TIMER enable
  ac:	85 b5       	in	r24, 0x25	; 37
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);				//Overflow interrupt enable
  b2:	ee e6       	ldi	r30, 0x6E	; 110
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	80 83       	st	Z, r24
	OCR0A=0;							//PWM = 0 
  bc:	17 bc       	out	0x27, r1	; 39
	
	
	/* Timer 1 toggle LED*/
	TCCR1A = (1 << COM1A0);					// ativar OC1A to toggle led
  be:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << CS12) | (1 << WGM12);	// CLKIO/256 (From prescaler) | Mode CTC
  c2:	8c e0       	ldi	r24, 0x0C	; 12
  c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 |= (1 << OCIE1A);				// Enable TIMER1
  c8:	ef e6       	ldi	r30, 0x6F	; 111
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
	OCR1A = 31250;							// Total timer ticks para 1Hz      62500
  d2:	82 e1       	ldi	r24, 0x12	; 18
  d4:	9a e7       	ldi	r25, 0x7A	; 122
  d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	/* ADC */
	
	ADMUX = 0b01100000;//(1<<REFS0)|(1<<ADLAR);							// AVcc, align left, ch0
  de:	80 e6       	ldi	r24, 0x60	; 96
  e0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b10000111;//(1<<ADEN)|(1<<ADATE)|(1<<ADIE)|(7<<ADPS0);		// Enable conversion | Adc Auto trigger, Adc interrupt, prescaler 128
  e4:	87 e8       	ldi	r24, 0x87	; 135
  e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = (1<<ADTS2);									// TC0 Overflow
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	sei();
  f0:	78 94       	sei
  f2:	08 95       	ret

000000f4 <__vector_11>:
	
}

ISR(TIMER1_COMPA_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
}
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	4f 93       	push	r20
 118:	5f 93       	push	r21
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
	ler_ad();
 12a:	0e 94 40 00 	call	0x80	; 0x80 <ler_ad>
}
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	bf 91       	pop	r27
 134:	af 91       	pop	r26
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	7f 91       	pop	r23
 13c:	6f 91       	pop	r22
 13e:	5f 91       	pop	r21
 140:	4f 91       	pop	r20
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__vector_21>:

ISR(ADC_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
	//	OCR0A=ADCH;					// valor duty cycle
}
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:



int main(void)
{
	inic();
 164:	0e 94 4c 00 	call	0x98	; 0x98 <inic>
 168:	ff cf       	rjmp	.-2      	; 0x168 <main+0x4>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
