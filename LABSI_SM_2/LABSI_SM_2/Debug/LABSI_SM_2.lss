
LABSI_SM_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e8  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000631  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000298  00000000  00000000  00000f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< Updated upstream
  9 .debug_str    0000038f  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009a  00000000  00000000  000015f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001691  2**0
=======
  9 .debug_str    000003a4  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a7  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000016c7  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  78:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_11>:
#include <avr/io.h>
#include <avr/interrupt.h>

/* Interrupts */
ISR(TIMER1_COMPA_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
		PORTB &= ~ 0b00000100;
  8a:	2a 98       	cbi	0x05, 2	; 5
}
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
	//PORTB = 0b00000100;
	PORTB = 0b00000100;
  a2:	84 e0       	ldi	r24, 0x04	; 4
  a4:	85 b9       	out	0x05, r24	; 5
	//PORTB = 0b00000000;
}
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <__vector_21>:

ISR(ADC_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
	
	OCR0A=ADCH;			// valor duty cycle
  be:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  c2:	87 bd       	out	0x27, r24	; 39
	//PORTB = 0b00000000;
}
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <inic>:

/* Functions */
void inic()
{
	DDRB = 0b00000110;		// Set PB1 as output OC1A
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00;		// Set PORTC as input
  d4:	17 b8       	out	0x07, r1	; 7
	DDRD = (1<<DDD6) | (1<<DDD7);	// Set PD6 as output OC0A
  d6:	80 ec       	ldi	r24, 0xC0	; 192
  d8:	8a b9       	out	0x0a, r24	; 10
			
	PORTC = 0xFF;		// PULL-UPS
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	88 b9       	out	0x08, r24	; 8
//	PORTD = 0xFF;		// PULL-UPS and LED
	
	/* Timer 0 */
	TCCR0A = (1<<COM0A1) | (1<<WGM01) | (1<<WGM00) ;	// Clear OC0A | Fast PWM 
  de:	83 e8       	ldi	r24, 0x83	; 131
  e0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02) | (1<<CS00);						// PRESCALER=1024
  e2:	85 e0       	ldi	r24, 0x05	; 5
  e4:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);								// Overflow interrupt enable
  e6:	ee e6       	ldi	r30, 0x6E	; 110
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	80 83       	st	Z, r24
	OCR0A=0;											// PWM = 0 
  f0:	17 bc       	out	0x27, r1	; 39
	
	
	/* Timer 1 toggle LED*/
	TCCR1A = (1 << COM1A0);					// Enable OC1A to toggle led
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << CS12) | (1 << WGM12);	// CLKIO/256 (From prescaler) | Mode CTC
  f8:	8c e0       	ldi	r24, 0x0C	; 12
  fa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 |= (1 << OCIE1A);				// Enable TIMER1
  fe:	ef e6       	ldi	r30, 0x6F	; 111
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	82 60       	ori	r24, 0x02	; 2
 106:	80 83       	st	Z, r24
	OCR1A = 31250;							// Total timer ticks to 1Hz
 108:	82 e1       	ldi	r24, 0x12	; 18
 10a:	9a e7       	ldi	r25, 0x7A	; 122
 10c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 110:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	/* ADC */
	ADMUX = (1<<REFS0)|(1<<ADLAR);							// AVcc | align left | ch0
 114:	80 e6       	ldi	r24, 0x60	; 96
 116:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(1<<ADATE)|(1<<ADIE)|(7<<ADPS0);		// Enable conversion | Adc Auto trigger | Adc interrupt | PS 128
 11a:	8f ea       	ldi	r24, 0xAF	; 175
 11c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = (1<<ADTS2);									// TC0 Overflow
 120:	84 e0       	ldi	r24, 0x04	; 4
 122:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	sei();
 126:	78 94       	sei
 128:	08 95       	ret

0000012a <main>:
}

/* Main code */
int main(void)
{
	inic();
 12a:	0e 94 68 00 	call	0xd0	; 0xd0 <inic>
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x4>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
